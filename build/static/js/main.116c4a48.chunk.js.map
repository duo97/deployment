{"version":3,"sources":["utilities.js","game_of_life.js","App.js","serviceWorker.js","index.js"],"names":["drawMesh","predictions","ctx","length","forEach","prediction","keypoints","scaledMesh","i","x","y","beginPath","arc","Math","PI","fillStyle","fill","operations","Game","props","useState","rows","push","Array","from","generateEmptyGrid","grid","setGrid","facedataRef","useRef","current","facedata","runSimulation","useCallback","points","g","produce","gridCopy","k","neighbors","newI","newK","point","c","floor","r","console","log","setTimeout","onClick","style","display","gridTemplateColumns","map","col","key","width","height","backgroundColor","border","App","setFacedata","webcamRef","canvasRef","runFacemesh","a","facemesh","mediapipeFacemesh","net","setInterval","detect","video","readyState","videoWidth","videoHeight","estimateFaces","input","face","getContext","requestAnimationFrame","useEffect","className","ref","position","marginLeft","marginRight","left","right","textAlign","zindex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.116c4a48.chunk.js","sourcesContent":["//  Triangulation sets of three\r\n\r\n\r\n// Triangle drawing method\r\nconst drawPath = (ctx, points, closePath) => {\r\n  const region = new Path2D();\r\n  region.moveTo(points[0][0], points[0][1]);\r\n  for (let i = 1; i < points.length; i++) {\r\n    const point = points[i];\r\n    region.lineTo(point[0], point[1]);\r\n  }\r\n\r\n  if (closePath) {\r\n    region.closePath();\r\n  }\r\n  ctx.strokeStyle = \"grey\";\r\n  ctx.stroke(region);\r\n};\r\n\r\n// Drawing Mesh\r\nexport const drawMesh = (predictions, ctx) => {\r\n  if (predictions.length > 0) {\r\n    predictions.forEach((prediction) => {\r\n      const keypoints = prediction.scaledMesh;\r\n      \r\n\r\n      // Draw Dots\r\n      for (let i = 0; i < keypoints.length; i++) {\r\n        const x = keypoints[i][0];\r\n        const y = keypoints[i][1];\r\n        // console.log(\"x is\",x,\"y\",y);\r\n        // console.log(\"column index is\",Math.floor(x/480*60),\"row index is\",Math.floor(y/640*80));\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, 1 /* radius */, 0, 3 * Math.PI);\r\n        ctx.fillStyle = \"aqua\";\r\n        ctx.fill();\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n//Activate cell\r\nexport const activateCell = (predictions, grid) => {\r\n  if (predictions.length > 0) {\r\n    predictions.forEach((prediction) => {\r\n      const keypoints = prediction.scaledMesh;\r\n\r\n\r\n      // Draw Dots\r\n      for (let i = 0; i < keypoints.length; i++) {\r\n        const x = keypoints[i][0];\r\n        const y = keypoints[i][1];\r\n\r\n        grid.activate(Math.floor(x/480*60),Math.floor(y/640*80));\r\n      }\r\n    });\r\n  }\r\n};","import React, { useState, useCallback, useRef } from \"react\";\r\nimport produce from 'immer';\r\n\r\n\r\nconst numRows = 120;\r\nconst numCols = 160;\r\n\r\nconst operations = [\r\n  [0, 1],\r\n  [0, -1],\r\n  [1, -1],\r\n  [-1, 1],\r\n  [1, 1],\r\n  [-1, -1],\r\n  [1, 0],\r\n  [-1, 0]\r\n];\r\n\r\nconst generateEmptyGrid = () => {\r\n  \r\n  const rows = [];\r\n  for (let i = 0; i < numRows; i++) {\r\n    rows.push(Array.from(Array(numCols), () => 0));\r\n  }\r\n\r\n  return rows;\r\n};\r\n\r\nconst Game= (props) => {\r\n    // console.log(\"get face data from parent\",props.facedata);\r\n  const [grid, setGrid] = useState(() => {\r\n    return generateEmptyGrid();\r\n  });\r\n \r\n  const facedataRef=useRef();\r\n  facedataRef.current=props.facedata;\r\n\r\n  const runSimulation = useCallback(() => {\r\n    let points=facedataRef.current;\r\n\r\n    setGrid(g => {\r\n      return produce(g, gridCopy => {\r\n        \r\n        \r\n        for (let i = 0; i < numRows; i++) {\r\n          for (let k = 0; k < numCols; k++) {\r\n            let neighbors = 0;\r\n            operations.forEach(([x, y]) => {\r\n              const newI = i + x;\r\n              const newK = k + y;\r\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\r\n                neighbors += g[newI][newK];\r\n              }\r\n            });\r\n\r\n            if (neighbors < 2 || neighbors > 3) {\r\n              gridCopy[i][k] = 0;\r\n            } else if (g[i][k] === 0 && neighbors === 3) {\r\n              gridCopy[i][k] = 1;\r\n            }\r\n\r\n          }\r\n        }\r\n        if (points.length > 0) {\r\n            points.forEach((point) => {\r\n              let keypoints =point.scaledMesh;\r\n            \r\n              for (let i = 0; i < keypoints.length; i++) {\r\n                const x = keypoints[i][0];\r\n                const y = keypoints[i][1];\r\n                const c=Math.floor(x/480*numCols);\r\n                const r=Math.floor(y/640*numRows);\r\n                console.log(\"column index is\",c,\"row index is\",r);\r\n                console.log(\"current grid is\",gridCopy);\r\n                if (gridCopy&&gridCopy[r]&&gridCopy[r][c]==0){\r\n                gridCopy[r][c] = 1;\r\n                }\r\n              }\r\n            });\r\n        }\r\n      });\r\n    });\r\n\r\n    setTimeout(runSimulation, 100);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        onClick={() => {\r\n        runSimulation();\r\n        }}\r\n      ></button>\r\n\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: `repeat(${numCols}, 5px)`\r\n        }}\r\n      >\r\n        {grid.map((rows, i) =>\r\n          rows.map((col, k) => (\r\n            <div\r\n              key={`${i}-${k}`}\r\n              style={{\r\n                width: 5,\r\n                height: 5,\r\n                backgroundColor: grid[i][k] ? \"pink\" :\"white\",\r\n                border: \"solid 1px black\"\r\n              }}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n\r\n","// 1. Install dependencies DONE\r\n// 2. Import dependencies DONE\r\n// 3. Setup webcam and canvas DONE\r\n// 4. Define references to those DONE\r\n// 5. Load posenet DONE\r\n// 6. Detect function DONE\r\n// 7. Drawing utilities from tensorflow DONE\r\n// 8. Draw functions DONE\r\n\r\n// Face Mesh - https://github.com/tensorflow/tfjs-models/tree/master/facemesh\r\n\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n// OLD MODEL\r\n//import * as facemesh from \"@tensorflow-models/facemesh\";\r\n\r\n// NEW MODEL\r\nimport * as facemesh from \"@tensorflow-models/face-landmarks-detection\";\r\nimport Webcam from \"react-webcam\";\r\nimport { drawMesh } from \"./utilities\";\r\nimport Game from \"./game_of_life\";\r\n\r\n\r\n\r\nfunction App() {\r\n  const [facedata, setFacedata] = useState([]);\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n\r\n  //  Load posenet\r\n  const runFacemesh = async () => {\r\n    // OLD MODEL\r\n    // const net = await facemesh.load({\r\n    //   inputResolution: { width: 640, height: 480 },\r\n    //   scale: 0.8,\r\n    // });\r\n    // NEW MODEL\r\n    const net = await facemesh.load(facemesh.SupportedPackages.mediapipeFacemesh);\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 10);\r\n  };\r\n\r\n  const detect = async (net) => {\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get Video Properties\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      // Set video width\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Set canvas width\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n\r\n      // Make Detections\r\n      // OLD MODEL\r\n      //       const face = await net.estimateFaces(video);\r\n      // NEW MODEL\r\n      const face = await net.estimateFaces({input:video});\r\n      setFacedata(face);\r\n      // console.log(face);\r\n\r\n      // Get canvas context\r\n      if (canvasRef.current){\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      \r\n      requestAnimationFrame(()=>{drawMesh(face, ctx)});\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(()=>{runFacemesh()}, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Webcam\r\n          ref={webcamRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"5%\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft:\"65%\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"left\",\r\n            zindex:20,\r\n            width: 640,\r\n            height: 480,\r\n            backgroundColor: \"rgba(255, 255, 255, 1)\",\r\n          }}\r\n        />\r\n         <Game\r\n         facedata={facedata}\r\n         style={{\r\n          position: \"absolute\",\r\n          marginLeft:\"5%\",\r\n          marginRight: \"auto\",\r\n          left: 0,\r\n          right: 0,\r\n          textAlign: \"left\",\r\n          zindex:200,\r\n          backgroundColor: \"rgba(255, 255, 255, 1)\",\r\n        }}\r\n        />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}